<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kubernetes on Hervé Delaunay</title>
    <link>http://localhost:1313/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on Hervé Delaunay</description>
    <generator>Hugo -- 0.150.0</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Aug 2024 22:23:13 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mastering Helm : A Journey to Dynamic Secret Generation</title>
      <link>http://localhost:1313/posts/mastering-helm--a-journey-to-dynamic-secret-generation/</link>
      <pubDate>Mon, 12 Aug 2024 22:23:13 +0200</pubDate>
      <guid>http://localhost:1313/posts/mastering-helm--a-journey-to-dynamic-secret-generation/</guid>
      <description>&lt;p&gt;In the world of Kubernetes and Helm, managing secrets securely and efficiently is crucial, especially when dealing with production databases. This article chronicles my journey to implement a dynamic secret generation mechanism for a StatefulSet&amp;rsquo;s database container using Helm.&lt;/p&gt;
&lt;p&gt;My objective was to generate a password for the database container of a StatefulSet using Helm. The requirements were to create the secret during the initial installation, to reuse the same secret when upgrading the release and to ensure the secret persists even if the release is deleted&lt;/p&gt;</description>
    </item>
    <item>
      <title>Which Cni Is Running in My Cluster ?</title>
      <link>http://localhost:1313/posts/which-cni-is-running-in-my-cluster/</link>
      <pubDate>Tue, 23 Jul 2024 22:28:12 +0200</pubDate>
      <guid>http://localhost:1313/posts/which-cni-is-running-in-my-cluster/</guid>
      <description>&lt;p&gt;Today a colleague of mine who is new to Kubernetes asked me what was the CNI running on our production cluster, I knew the answer but I wanted to doublecheck, just to see if I could climb up to the source of truth.&lt;/p&gt;
&lt;p&gt;My first reflex was to search in the kube-system namespace for pods with a CNI-like name. And I quickly found what I was looking for :&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;cni-1&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/which-cni-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;With this I was pretty sure &lt;strong&gt;Antrea&lt;/strong&gt; was the chosen CNI, but I knew there were other ways to verify it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adding TLS to Your Ingress Traffic</title>
      <link>http://localhost:1313/posts/adding-tls-to-your-ingress-traffic/</link>
      <pubDate>Sat, 22 Jun 2024 10:26:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/adding-tls-to-your-ingress-traffic/</guid>
      <description>&lt;p&gt;Today at my job I managed to get our new product up and running on kubernetes, deployment and statefulsets are working but I wanted to test the app&amp;rsquo;s behavior while accessing it from the outside. As we have multiple services running on the cluster and as we want to secure the connection through TLS it is best to use an Ingress (resources and controllers). I already did the Ingress controller setup earlier, using &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/&#34;&gt;Ingress-nginx-controller&lt;/a&gt; so I just had to create an Ingress-resources and I wanted to discuss about my process here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pull Images From Your Harbor Registry With Kubernetes</title>
      <link>http://localhost:1313/posts/pull-images-from-your-harbor-registry-with-kubernetes/</link>
      <pubDate>Sun, 09 Jun 2024 22:24:35 +0200</pubDate>
      <guid>http://localhost:1313/posts/pull-images-from-your-harbor-registry-with-kubernetes/</guid>
      <description>&lt;h2 id=&#34;pulling-images-from-a-private-registry-with-kubernetes&#34;&gt;Pulling images from a private registry with kubernetes&lt;/h2&gt;
&lt;p&gt;In this example I am going to use Harbor.&lt;/p&gt;
&lt;p&gt;For the sake of best practices and security we first have to create a robot account on harbor :&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;harbor-1&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/harbor-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;harbor-2&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/harbor-2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;harbor-3&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/harbor-3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then select the harbor repo on which the robot account will have these permissions :&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;harbor-4&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/harbor-4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;You then have a confirmation message from harbor, keep the secret : we will register it into a kubernetes secret in our cluster.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Routing Traffic Within Your Kubernetes Cluster : Ingress-Nginx Controller</title>
      <link>http://localhost:1313/posts/routing-traffic-within-your-kubernetes-cluster--ingress-nginx-controller/</link>
      <pubDate>Mon, 13 May 2024 21:46:33 +0200</pubDate>
      <guid>http://localhost:1313/posts/routing-traffic-within-your-kubernetes-cluster--ingress-nginx-controller/</guid>
      <description>&lt;p&gt;I recently had to setup an Ingress in one of the Kubernetes cluster of my job, so I wrote a short explanation for my colleagues that are not aware of Kubernetes Ingresses and since it provide usefull explanations on it I figured I&amp;rsquo;ll also share it here :&lt;/p&gt;
&lt;h2 id=&#34;classic-ingress-in-kubernetes&#34;&gt;Classic Ingress in Kubernetes&lt;/h2&gt;
&lt;p&gt;An Ingress in Kubernetes is an object that makes microservices available outside the cluster. It routes incoming requests to the appropriate services, much like a traditional load balancer.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
